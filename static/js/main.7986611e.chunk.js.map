{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.7986611e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    // eslint-disable-next-line \r\n    const { name, email, id } = props;\r\n    return(\r\n        \r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\r\n            <img alt ='robots' src={`https://robohash.org/${props.id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2> \r\n                {/* Al llamar const = props arriba, puedes solo poner el nombre del atributo  */}\r\n                <p>{props.email}</p>\r\n                {/* En cambio, si no llamaramos esa variable de props, si tendr√≠amos que escribir props.atritubuto (email) */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n  \r\n  const cardComponent = robots.map((user,i)=>{\r\n    return (<Card \r\n      key={i} \r\n      id={robots[i].id} \r\n      name={robots[i].name} \r\n      email={robots[i].email}\r\n      />);\r\n  })\r\n  return (\r\n     <div>\r\n        {cardComponent}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport { robots } from './robots';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return(\r\n        <div className='pa2'>\r\n        <input className='pa3 ba b--green bg-lightest-blue' \r\n        type='search' \r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n        />\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n            this.setState({ hasError: true})\r\n    }\r\n    render() {\r\n        if (this.state.hasError){\r\n            return <h1>Oooops. That is not good!</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {  Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport '../containers/App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { requestRobots, setSearchField } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n   return  {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n   } \r\n}\r\n\r\nclass App extends Component { \r\n  \r\n\r\n    componentDidMount() {\r\n    this.props.onRequestRobots();\r\n        \r\n    }\r\n \r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter( robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return isPending ?\r\n      \r\n             <h1>Loading</h1> :\r\n        (\r\n            <div className='tc'>\r\n            <h1 className=\"f2\">RoboFriends</h1>\r\n            <SearchBox searchChange={onSearchChange}/>\r\n            <Scroll>\r\n            <ErrorBoundary>\r\n            <CardList robots={filteredRobots} />\r\n            </ErrorBoundary>\r\n            </Scroll>\r\n            </div>\r\n        );\r\n    }}    \r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App); ","import {\r\n     CHANGE_SEARCH_FIELD,\r\n     REQUEST_ROBOTS_PRENDING,\r\n     REQUEST_ROBOTS_SUCCESS,\r\n     REQUEST_ROBOTS_FAIL\r\n    } from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: 'CHANGE_SEARCH_FIELD',\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PRENDING })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAIL, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PRENDING = 'REQUEST_ROBOTS_PRENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAIL = 'REQUEST_ROBOTS_FAIL';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PRENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAIL\r\n   } from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action ={})=> {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PRENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAIL:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false})\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}